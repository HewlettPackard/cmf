###
# Copyright (2023) Hewlett Packard Enterprise Development LP
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###
version: '3.8'
services:
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: mlmd
      POSTGRES_PORT: ${POSTGRES_PORT}
    volumes:
      - ${HOME}/cmf-server/data/postgres_data:/var/lib/postgresql/data
      # - postgres_data:/var/lib/postgresql/data
      - ./db_init.sql:/docker-entrypoint-initdb.d/db_init.sql # Mount SQL script
      - ./custom-entrypoint.sh:/custom-entrypoint.sh # Mount custom entrypoint script
    entrypoint: ["/bin/bash", "/custom-entrypoint.sh"] # Use the custom entrypoint script
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -p $${POSTGRES_PORT} -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    network_mode: host
    env_file:
      - .env

  tensorboard:
    image: tensorflow/tensorflow
    command: tensorboard --logdir /logs --host 0.0.0.0
    volumes:
      # directory path should be updated as per user's environment
      - ${HOME}/cmf-server/data/tensorboard-logs:/logs
      # - tensorboard_logs:/logs
    expose:
      - 6006
    container_name: tensorboard
    network_mode: host
    env_file:
      - .env

  server:
    image: server:latest
    # both the directory paths should be updated as per user's environment
    volumes:
      - ${HOME}/cmf-server/data:/cmf-server/data
      - ${HOME}/cmf-server/data/env:/cmf-server/data/env
      - ${HOME}/cmf-server/data/static:/cmf-server/data/static
      - ${HOME}/cmf-server/data/labels:/cmf-server/data/labels
      - ${HOME}/cmf-server/data/tensorboard-logs:/cmf-server/data/tensorboard-logs
      # - cmf_data:/cmf-server/data
      # - cmf_env:/cmf-server/data/env
      # - cmf_static:/cmf-server/data/static
      # - cmf_labels:/cmf-server/data/labels
      # - tensorboard_logs:/cmf-server/data/tensorboard-logs
    container_name: cmf-server
    build:
      context: ./
      dockerfile: ./server/Dockerfile
    restart: always
    environment:
      MYIP: ${IP:-127.0.0.1}
      HOSTNAME: ${HOSTNAME:-localhost}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: mlmd
    expose:
      - 8080
    healthcheck:
      test: if [ -z $IP ]; then curl -f http://$HOSTNAME:8080; else curl -f http://$IP:8080; fi
      interval: 15s
      retries: 32
    depends_on:
      postgres:
        condition: service_healthy
    network_mode: host
    env_file:
      - .env

  ui:
    image: ui:latest
    container_name: ui-server
    build:
      context: ./ui
      dockerfile: Dockerfile
    restart: always
    environment:
      REACT_APP_MY_IP: ${IP}
      REACT_APP_MY_HOSTNAME: ${HOSTNAME}
    expose:
      - 3000
    healthcheck:
      test: curl -f http://localhost:3000 || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    depends_on:
      server:
        condition: service_healthy
    network_mode: host
    env_file:
      - .env

# Commented out Docker volumes (can be used instead of physical mounts)
# volumes:
#   postgres_data:
#   tensorboard_logs:
#   cmf_data:
#   cmf_env:
#   cmf_static:
#   cmf_labels:
